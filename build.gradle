plugins {
    id 'java'
    id 'war'
    id 'org.flywaydb.flyway' version '9.8.1'
}
def projectProps = new Properties()
projectProps.load(new FileInputStream(rootProject.file("build.properties")))


repositories {
    mavenCentral()
}

sourceCompatibility = projectProps.getProperty('sourceCompatibility')
targetCompatibility = projectProps.getProperty('targetCompatibility')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly('jakarta.json:jakarta.json-api:2.1.1')
    compileOnly('jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1')
    compileOnly('jakarta.validation:jakarta.validation-api:3.0.0')
    compileOnly('jakarta.ejb:jakarta.ejb-api:4.0.0')
    compileOnly('jakarta.faces:jakarta.faces-api:4.0.1')
    compileOnly('jakarta.servlet:jakarta.servlet-api:5.0.0')
    implementation 'org.projectlombok:lombok:1.18.28'
    implementation('org.hibernate:hibernate-core:6.0.2.Final')
    implementation('org.postgresql:postgresql:42.2.27')
    implementation('org.glassfish.jaxb:jaxb-runtime:3.0.2')
    implementation('org.primefaces:primefaces:13.0.0:jakarta')
    implementation('com.google.code.gson:gson:2.10.1')


//    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
//    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

flyway {
    locations = [projectProps.getProperty('flywayLocations')]
    url = projectProps.getProperty('dbUrl')
    user = projectProps.getProperty('dbUser')
    password = projectProps.getProperty('dbPassword')
    schemas = [projectProps.getProperty('flywaySchemas')]
}
flywayMigrate.dependsOn(classes)

jar {
    manifest {
        attributes(
                'Main-Class': projectProps.getProperty('mainClass'),
                'Implementation-Version': projectProps.getProperty('projectVersion')
        )
    }
}
tasks.register('compile') {
    group = 'build'
    description = 'Compilation of the project source code'
    dependsOn 'compileJava'
}

tasks.register('build_task') {
    group = 'build'
    description = 'Building the project and packing it into an executable Jar archive'
    dependsOn 'compile'
    finalizedBy 'jar'
}

tasks.register('clean_task') {
    group = 'build'
    description = 'Deleting all temporary files and compiled classes'
    dependsOn 'cleanJava'
    doLast {
        delete fileTree(dir: 'build', exclude: 'libs/')
    }
}

tasks.register('cleanJava', Delete) {
    description = 'Delete compiled Java classes'
    delete 'build/classes/java/main'
}

tasks.register('test_task') {
    group = 'verification'
    description = 'Launching JUnit tests of the project'
    dependsOn 'build_task'
    finalizedBy 'test'
}


tasks.register('javadoc_task', Javadoc) {
    group = 'documentation'
    description = 'Generate javadoc'
    dependsOn 'compile'

    source = sourceSets.main.allJava
    destinationDir = file("${buildDir}/javadoc")
    classpath = sourceSets.main.compileClasspath

    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        links("https://docs.oracle.com/javase/8/docs/api/")
        addStringOption('Xdoclint:none', '-quiet')
    }
}

import java.security.MessageDigest

tasks.register('md5sha1') {
    group = 'build'
    description = 'Calculating MD5 and SHA-1 checksums'
    dependsOn 'jar'
    doLast {
        def jarFile = file("build/libs/${project.name}.jar")
        if (!jarFile.exists()) {
            throw new FileNotFoundException("JAR file not found: ${jarFile.absolutePath}")
        }

        def md5 = MessageDigest.getInstance("MD5")
        def sha1 = MessageDigest.getInstance("SHA-1")

        jarFile.withInputStream { input ->
            byte[] buffer = new byte[8192]
            int bytesRead
            while ((bytesRead = input.read(buffer)) != -1) {
                md5.update(buffer, 0, bytesRead)
                sha1.update(buffer, 0, bytesRead)
            }
        }

        def md5Hex = md5.digest().encodeHex().toString()
        def sha1Hex = sha1.digest().encodeHex().toString()

        def manifestFile = file("${buildDir}/tmp/jar/MANIFEST.MF")
        manifestFile.parentFile.mkdirs()
        manifestFile.withWriterAppend { writer ->
            writer.println("MD5-Digest: ${md5Hex}")
            writer.println("SHA1-Digest: ${sha1Hex}")
        }
    }
}

tasks.register('doc') {
    group = 'documentation'
    description = 'Creating documentation, including Javadoc, and adding checksums to the manifest'
    dependsOn 'javadoc_task', 'md5sha1'
}










